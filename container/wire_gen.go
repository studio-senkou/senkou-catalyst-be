// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package container

import (
	"github.com/google/wire"
	"senkou-catalyst-be/config"
	"senkou-catalyst-be/controllers"
	"senkou-catalyst-be/repositories"
	"senkou-catalyst-be/services"
)

// Injectors from wire.go:

func InitializeUserController() (*controllers.UserController, error) {
	db := config.GetDB()
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userController := controllers.NewUserController(userService)
	return userController, nil
}

func InitializeMerchantController() (*controllers.MerchantController, error) {
	db := config.GetDB()
	merchantRepository := repositories.NewMerchantRepository(db)
	merchantService := services.NewMerchantService(merchantRepository)
	merchantController := controllers.NewMerchantController(merchantService)
	return merchantController, nil
}

func InitializeProductController() (*controllers.ProductController, error) {
	db := config.GetDB()
	productRepository := repositories.NewProductRepository(db)
	userRepository := repositories.NewUserRepository(db)
	productService := services.NewProductService(productRepository, userRepository)
	productController := controllers.NewProductController(productService)
	return productController, nil
}

func InitializeCategoryController() (*controllers.CategoryController, error) {
	db := config.GetDB()
	categoryRepository := repositories.NewCategoryRepository(db)
	categoryService := services.NewCategoryService(categoryRepository)
	categoryController := controllers.NewCategoryController(categoryService)
	return categoryController, nil
}

func InitializePredefinedCategoryController() (*controllers.PredefinedCategoryController, error) {
	db := config.GetDB()
	predefinedCategoryRepository := repositories.NewPredefinedCategoryRepository(db)
	predefinedCategoryService := services.NewPredefinedCategoryService(predefinedCategoryRepository)
	predefinedCategoryController := controllers.NewPredefinedCategoryController(predefinedCategoryService)
	return predefinedCategoryController, nil
}

func InitializeAuthController() (*controllers.AuthController, error) {
	db := config.GetDB()
	authRepository := repositories.NewAuthRepository(db)
	authService := services.NewAuthService(authRepository)
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	authController := controllers.NewAuthController(authService, userService)
	return authController, nil
}

func InitializeSubscriptionController() (*controllers.SubscriptionController, error) {
	db := config.GetDB()
	subscriptionRepository := repositories.NewSubscriptionRepository(db)
	subscriptionPlanRepository := repositories.NewSubscriptionPlanRepository(db)
	subscriptionService := services.NewSubscriptionService(subscriptionRepository, subscriptionPlanRepository)
	subscriptionController := controllers.NewSubscriptionController(subscriptionService)
	return subscriptionController, nil
}

func InitializeUserService() (services.UserService, func(), error) {
	db := config.GetDB()
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	return userService, func() {
	}, nil
}

func InitializeProductService() (services.ProductService, func(), error) {
	db := config.GetDB()
	productRepository := repositories.NewProductRepository(db)
	userRepository := repositories.NewUserRepository(db)
	productService := services.NewProductService(productRepository, userRepository)
	return productService, func() {
	}, nil
}

func InitializeContainer() (*Container, error) {
	db := config.GetDB()
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userController := controllers.NewUserController(userService)
	merchantRepository := repositories.NewMerchantRepository(db)
	merchantService := services.NewMerchantService(merchantRepository)
	merchantController := controllers.NewMerchantController(merchantService)
	productRepository := repositories.NewProductRepository(db)
	productService := services.NewProductService(productRepository, userRepository)
	productController := controllers.NewProductController(productService)
	categoryRepository := repositories.NewCategoryRepository(db)
	categoryService := services.NewCategoryService(categoryRepository)
	categoryController := controllers.NewCategoryController(categoryService)
	predefinedCategoryRepository := repositories.NewPredefinedCategoryRepository(db)
	predefinedCategoryService := services.NewPredefinedCategoryService(predefinedCategoryRepository)
	predefinedCategoryController := controllers.NewPredefinedCategoryController(predefinedCategoryService)
	authRepository := repositories.NewAuthRepository(db)
	authService := services.NewAuthService(authRepository)
	authController := controllers.NewAuthController(authService, userService)
	subscriptionRepository := repositories.NewSubscriptionRepository(db)
	subscriptionPlanRepository := repositories.NewSubscriptionPlanRepository(db)
	subscriptionService := services.NewSubscriptionService(subscriptionRepository, subscriptionPlanRepository)
	subscriptionController := controllers.NewSubscriptionController(subscriptionService)
	container := NewContainer(userController, merchantController, productController, categoryController, predefinedCategoryController, authController, subscriptionController, userService, productService)
	return container, nil
}

// wire.go:

var DatabaseSet = wire.NewSet(config.GetDB)

var RepositorySet = wire.NewSet(repositories.NewUserRepository, repositories.NewMerchantRepository, repositories.NewProductRepository, repositories.NewCategoryRepository, repositories.NewPredefinedCategoryRepository, repositories.NewAuthRepository, repositories.NewSubscriptionRepository, repositories.NewSubscriptionPlanRepository)

var ServiceSet = wire.NewSet(services.NewUserService, services.NewMerchantService, services.NewProductService, services.NewCategoryService, services.NewPredefinedCategoryService, services.NewAuthService, services.NewSubscriptionService)

var ControllerSet = wire.NewSet(controllers.NewUserController, controllers.NewMerchantController, controllers.NewProductController, controllers.NewCategoryController, controllers.NewPredefinedCategoryController, controllers.NewAuthController, controllers.NewSubscriptionController)

func NewContainer(
	userController *controllers.UserController,
	merchantController *controllers.MerchantController,
	productController *controllers.ProductController,
	categoryController *controllers.CategoryController,
	predefinedCategoryController *controllers.PredefinedCategoryController,
	authController *controllers.AuthController,
	subscriptionController *controllers.SubscriptionController,
	userService services.UserService,
	productService services.ProductService,
) *Container {
	return &Container{
		UserController:               userController,
		MerchantController:           merchantController,
		ProductController:            productController,
		CategoryController:           categoryController,
		PredefinedCategoryController: predefinedCategoryController,
		AuthController:               authController,
		SubscriptionController:       subscriptionController,
		UserService:                  userService,
		ProductService:               productService,
	}
}
