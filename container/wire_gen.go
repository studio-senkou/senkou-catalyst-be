// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package container

import (
	"github.com/google/wire"
	"senkou-catalyst-be/app/controllers"
	"senkou-catalyst-be/app/services"
	"senkou-catalyst-be/integrations/midtrans"
	"senkou-catalyst-be/platform/config"
	"senkou-catalyst-be/repositories"
	"senkou-catalyst-be/utils/auth"
	config2 "senkou-catalyst-be/utils/config"
	"senkou-catalyst-be/utils/mailer"
)

// Injectors from wire.go:

func InitializeUserController() (*controllers.UserController, error) {
	db := config.GetDB()
	userRepository := repositories.NewUserRepository(db)
	merchantRepository := repositories.NewMerchantRepository(db)
	emailActivationRepository := repositories.NewEmailActivationRepository(db)
	userService := services.NewUserService(userRepository, merchantRepository, emailActivationRepository)
	productRepository := repositories.NewProductRepository(db)
	categoryRepository := repositories.NewCategoryRepository(db)
	merchantService := services.NewMerchantService(merchantRepository, productRepository, categoryRepository)
	subscriptionRepository := repositories.NewSubscriptionRepository(db)
	subscriptionPlanRepository := repositories.NewSubscriptionPlanRepository(db)
	subscriptionService := services.NewSubscriptionService(subscriptionRepository, subscriptionPlanRepository)
	userController := controllers.NewUserController(userService, merchantService, subscriptionService)
	return userController, nil
}

func InitializeMerchantController() (*controllers.MerchantController, error) {
	db := config.GetDB()
	merchantRepository := repositories.NewMerchantRepository(db)
	productRepository := repositories.NewProductRepository(db)
	categoryRepository := repositories.NewCategoryRepository(db)
	merchantService := services.NewMerchantService(merchantRepository, productRepository, categoryRepository)
	productInteractionRepository := repositories.NewProductInteractionRepository(db)
	productInteractionService := services.NewProductInteractionService(productInteractionRepository)
	merchantController := controllers.NewMerchantController(merchantService, productInteractionService)
	return merchantController, nil
}

func InitializeProductController() (*controllers.ProductController, error) {
	db := config.GetDB()
	productRepository := repositories.NewProductRepository(db)
	userRepository := repositories.NewUserRepository(db)
	productService := services.NewProductService(productRepository, userRepository)
	merchantRepository := repositories.NewMerchantRepository(db)
	emailActivationRepository := repositories.NewEmailActivationRepository(db)
	userService := services.NewUserService(userRepository, merchantRepository, emailActivationRepository)
	productInteractionRepository := repositories.NewProductInteractionRepository(db)
	productInteractionService := services.NewProductInteractionService(productInteractionRepository)
	productController := controllers.NewProductController(productService, userService, productInteractionService)
	return productController, nil
}

func InitializeCategoryController() (*controllers.CategoryController, error) {
	db := config.GetDB()
	categoryRepository := repositories.NewCategoryRepository(db)
	categoryService := services.NewCategoryService(categoryRepository)
	categoryController := controllers.NewCategoryController(categoryService)
	return categoryController, nil
}

func InitializePredefinedCategoryController() (*controllers.PredefinedCategoryController, error) {
	db := config.GetDB()
	predefinedCategoryRepository := repositories.NewPredefinedCategoryRepository(db)
	predefinedCategoryService := services.NewPredefinedCategoryService(predefinedCategoryRepository)
	predefinedCategoryController := controllers.NewPredefinedCategoryController(predefinedCategoryService)
	return predefinedCategoryController, nil
}

func InitializeAuthController() (*controllers.AuthController, error) {
	db := config.GetDB()
	authRepository := repositories.NewAuthRepository(db)
	jwtManager, err := ProvideJWTManager()
	if err != nil {
		return nil, err
	}
	authService := services.NewAuthService(authRepository, jwtManager)
	userRepository := repositories.NewUserRepository(db)
	merchantRepository := repositories.NewMerchantRepository(db)
	emailActivationRepository := repositories.NewEmailActivationRepository(db)
	userService := services.NewUserService(userRepository, merchantRepository, emailActivationRepository)
	authController := controllers.NewAuthController(authService, userService)
	return authController, nil
}

func InitializeSubscriptionController() (*controllers.SubscriptionController, error) {
	db := config.GetDB()
	userRepository := repositories.NewUserRepository(db)
	merchantRepository := repositories.NewMerchantRepository(db)
	emailActivationRepository := repositories.NewEmailActivationRepository(db)
	userService := services.NewUserService(userRepository, merchantRepository, emailActivationRepository)
	subscriptionRepository := repositories.NewSubscriptionRepository(db)
	subscriptionPlanRepository := repositories.NewSubscriptionPlanRepository(db)
	subscriptionService := services.NewSubscriptionService(subscriptionRepository, subscriptionPlanRepository)
	subscriptionOrderRepository := repositories.NewSubscriptionOrderRepository(db)
	subscriptionOrderService := services.NewSubscriptionOrderService(subscriptionOrderRepository)
	midtransClient, err := ProvideMidtransClient()
	if err != nil {
		return nil, err
	}
	paymentTransactionRepository := repositories.NewPaymentTransactionRepository(db)
	paymentService := services.NewPaymentService(midtransClient, paymentTransactionRepository)
	subscriptionController := controllers.NewSubscriptionController(userService, subscriptionService, subscriptionOrderService, paymentService)
	return subscriptionController, nil
}

func InitializePaymentController() (*controllers.PaymentController, error) {
	midtransClient, err := ProvideMidtransClient()
	if err != nil {
		return nil, err
	}
	db := config.GetDB()
	paymentTransactionRepository := repositories.NewPaymentTransactionRepository(db)
	paymentService := services.NewPaymentService(midtransClient, paymentTransactionRepository)
	paymentController := controllers.NewPaymentController(paymentService)
	return paymentController, nil
}

func InitializePaymentMethodsController() (*controllers.PaymentMethodsController, error) {
	paymentMethodsService := services.NewPaymentMethodsService()
	paymentMethodsController := controllers.NewPaymentMethodsController(paymentMethodsService)
	return paymentMethodsController, nil
}

func InitializeUserService() (services.UserService, func(), error) {
	db := config.GetDB()
	userRepository := repositories.NewUserRepository(db)
	merchantRepository := repositories.NewMerchantRepository(db)
	emailActivationRepository := repositories.NewEmailActivationRepository(db)
	userService := services.NewUserService(userRepository, merchantRepository, emailActivationRepository)
	return userService, func() {
	}, nil
}

func InitializeProductService() (services.ProductService, func(), error) {
	db := config.GetDB()
	productRepository := repositories.NewProductRepository(db)
	userRepository := repositories.NewUserRepository(db)
	productService := services.NewProductService(productRepository, userRepository)
	return productService, func() {
	}, nil
}

func InitializeProductInteractionService() (services.ProductInteractionService, func(), error) {
	db := config.GetDB()
	productInteractionRepository := repositories.NewProductInteractionRepository(db)
	productInteractionService := services.NewProductInteractionService(productInteractionRepository)
	return productInteractionService, func() {
	}, nil
}

func InitializeSubscriptionOrderService() (services.SubscriptionOrderService, func(), error) {
	db := config.GetDB()
	subscriptionOrderRepository := repositories.NewSubscriptionOrderRepository(db)
	subscriptionOrderService := services.NewSubscriptionOrderService(subscriptionOrderRepository)
	return subscriptionOrderService, func() {
	}, nil
}

func InitializePaymentMethodsService() (services.PaymentMethodsService, func(), error) {
	paymentMethodsService := services.NewPaymentMethodsService()
	return paymentMethodsService, func() {
	}, nil
}

func InitializePaymentService() (services.PaymentService, func(), error) {
	midtransClient, err := ProvideMidtransClient()
	if err != nil {
		return nil, nil, err
	}
	db := config.GetDB()
	paymentTransactionRepository := repositories.NewPaymentTransactionRepository(db)
	paymentService := services.NewPaymentService(midtransClient, paymentTransactionRepository)
	return paymentService, func() {
	}, nil
}

func InitializeContainer() (*Container, error) {
	db := config.GetDB()
	userRepository := repositories.NewUserRepository(db)
	merchantRepository := repositories.NewMerchantRepository(db)
	emailActivationRepository := repositories.NewEmailActivationRepository(db)
	userService := services.NewUserService(userRepository, merchantRepository, emailActivationRepository)
	productRepository := repositories.NewProductRepository(db)
	categoryRepository := repositories.NewCategoryRepository(db)
	merchantService := services.NewMerchantService(merchantRepository, productRepository, categoryRepository)
	subscriptionRepository := repositories.NewSubscriptionRepository(db)
	subscriptionPlanRepository := repositories.NewSubscriptionPlanRepository(db)
	subscriptionService := services.NewSubscriptionService(subscriptionRepository, subscriptionPlanRepository)
	userController := controllers.NewUserController(userService, merchantService, subscriptionService)
	productInteractionRepository := repositories.NewProductInteractionRepository(db)
	productInteractionService := services.NewProductInteractionService(productInteractionRepository)
	merchantController := controllers.NewMerchantController(merchantService, productInteractionService)
	productService := services.NewProductService(productRepository, userRepository)
	productController := controllers.NewProductController(productService, userService, productInteractionService)
	categoryService := services.NewCategoryService(categoryRepository)
	categoryController := controllers.NewCategoryController(categoryService)
	predefinedCategoryRepository := repositories.NewPredefinedCategoryRepository(db)
	predefinedCategoryService := services.NewPredefinedCategoryService(predefinedCategoryRepository)
	predefinedCategoryController := controllers.NewPredefinedCategoryController(predefinedCategoryService)
	authRepository := repositories.NewAuthRepository(db)
	jwtManager, err := ProvideJWTManager()
	if err != nil {
		return nil, err
	}
	authService := services.NewAuthService(authRepository, jwtManager)
	authController := controllers.NewAuthController(authService, userService)
	subscriptionOrderRepository := repositories.NewSubscriptionOrderRepository(db)
	subscriptionOrderService := services.NewSubscriptionOrderService(subscriptionOrderRepository)
	midtransClient, err := ProvideMidtransClient()
	if err != nil {
		return nil, err
	}
	paymentTransactionRepository := repositories.NewPaymentTransactionRepository(db)
	paymentService := services.NewPaymentService(midtransClient, paymentTransactionRepository)
	subscriptionController := controllers.NewSubscriptionController(userService, subscriptionService, subscriptionOrderService, paymentService)
	paymentMethodsService := services.NewPaymentMethodsService()
	paymentMethodsController := controllers.NewPaymentMethodsController(paymentMethodsService)
	paymentController := controllers.NewPaymentController(paymentService)
	storageController := controllers.NewStorageController()
	container := NewContainer(userController, merchantController, productController, categoryController, predefinedCategoryController, authController, subscriptionController, paymentMethodsController, paymentController, storageController, userService, productService)
	return container, nil
}

// wire.go:

var DatabaseSet = wire.NewSet(config.GetDB)

var RepositorySet = wire.NewSet(repositories.NewUserRepository, repositories.NewMerchantRepository, repositories.NewEmailActivationRepository, repositories.NewProductRepository, repositories.NewProductInteractionRepository, repositories.NewCategoryRepository, repositories.NewPredefinedCategoryRepository, repositories.NewAuthRepository, repositories.NewSubscriptionRepository, repositories.NewSubscriptionPlanRepository, repositories.NewSubscriptionOrderRepository, repositories.NewPaymentTransactionRepository)

var ServiceSet = wire.NewSet(services.NewUserService, services.NewMerchantService, services.NewProductService, services.NewProductInteractionService, services.NewCategoryService, services.NewPredefinedCategoryService, services.NewAuthService, services.NewSubscriptionService, services.NewSubscriptionOrderService, services.NewPaymentMethodsService, services.NewPaymentService, mailer.NewMailerService)

var ControllerSet = wire.NewSet(controllers.NewUserController, controllers.NewMerchantController, controllers.NewProductController, controllers.NewCategoryController, controllers.NewPredefinedCategoryController, controllers.NewAuthController, controllers.NewSubscriptionController, controllers.NewPaymentMethodsController, controllers.NewPaymentController, controllers.NewStorageController)

func ProvideJWTManager() (*auth.JWTManager, error) {
	secret := config2.MustGetEnv("AUTH_SECRET")
	return auth.NewJWTManager(secret)
}

var UtilSet = wire.NewSet(
	ProvideJWTManager,
)

func ProvideMidtransClient() (*midtrans.MidtransClient, error) {
	return midtrans.NewMidtransClient(), nil
}

func ProvideMidtransBuilder(client *midtrans.MidtransClient) *midtrans.PaymentBuilder {
	return midtrans.NewPaymentBuilder(client)
}

var MidtransSet = wire.NewSet(
	ProvideMidtransClient,
	ProvideMidtransBuilder,
)

func NewContainer(
	userController *controllers.UserController,
	merchantController *controllers.MerchantController,
	productController *controllers.ProductController,
	categoryController *controllers.CategoryController,
	predefinedCategoryController *controllers.PredefinedCategoryController,
	authController *controllers.AuthController,
	subscriptionController *controllers.SubscriptionController,
	paymentMethodsController *controllers.PaymentMethodsController,
	paymentController *controllers.PaymentController,
	storageController *controllers.StorageController,
	userService services.UserService,
	productService services.ProductService,
) *Container {
	return &Container{
		UserController:               userController,
		MerchantController:           merchantController,
		ProductController:            productController,
		CategoryController:           categoryController,
		PredefinedCategoryController: predefinedCategoryController,
		AuthController:               authController,
		SubscriptionController:       subscriptionController,
		PaymentMethodsController:     paymentMethodsController,
		PaymentController:            paymentController,
		StorageController:            storageController,
		UserService:                  userService,
		ProductService:               productService,
	}
}
